package ed448

import (
	"crypto/rand"

	. "gopkg.in/check.v1"
)

var basePoint, _ = NewPoint(serialized{
	0x9f, 0x93, 0xed, 0x0a, 0x84, 0xde, 0xf0,
	0xc7, 0xa0, 0x4b, 0x3f, 0x03, 0x70, 0xc1,
	0x96, 0x3d, 0xc6, 0x94, 0x2d, 0x93, 0xf3,
	0xaa, 0x7e, 0x14, 0x96, 0xfa, 0xec, 0x9c,
	0x70, 0xd0, 0x59, 0x3c, 0x5c, 0x06, 0x5f,
	0x24, 0x33, 0xf7, 0xad, 0x26, 0x6a, 0x3a,
	0x45, 0x98, 0x60, 0xf4, 0xaf, 0x4f, 0x1b,
	0xff, 0x92, 0x26, 0xea, 0xa0, 0x7e, 0x29,
},
	serialized{0x13},
)

func (s *Ed448Suite) BenchmarkPointIsOnCurve(c *C) {
	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		basePoint.OnCurve()
	}
}

func (s *Ed448Suite) BenchmarkPointDouble(c *C) {
	p := basePoint

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		p = p.double()
	}

	c.Assert(p.OnCurve(), Equals, true)
}

func (s *Ed448Suite) BenchmarkPointUnifiedAddition(c *C) {
	p := basePoint

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		p = p.add(p)
	}

	c.Assert(p.OnCurve(), Equals, true)
}

func (s *Ed448Suite) BenchmarkGenerateKey(c *C) {
	curve := newRadixCurve()
	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		curve.generateKey(rand.Reader)
	}
}

func (s *Ed448Suite) BenchmarkComputeSecret(c *C) {
	curve := newRadixCurve()
	k, err := curve.generateKey(rand.Reader)
	c.Assert(err, IsNil)

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		curve.computeSecret(k.secretKey(), k.publicKey())
	}
}

func (s *Ed448Suite) BenchmarkSign(c *C) {
	curve := newRadixCurve()
	msg := []byte("hey there")
	k := privateKey([privKeyBytes]byte{
		//secret
		0x1f, 0x44, 0xfd, 0x2e, 0xde, 0x47, 0xca, 0xa8,
		0x7c, 0x4c, 0x45, 0x88, 0x1a, 0x7e, 0x01, 0x5a,
		0xa9, 0x01, 0x37, 0xfb, 0x0d, 0xbe, 0xb9, 0xe0,
		0xeb, 0x47, 0x29, 0xf7, 0x74, 0x0b, 0x5c, 0x23,
		0x66, 0xaa, 0xfd, 0x39, 0x03, 0x38, 0x78, 0x80,
		0x8f, 0xb2, 0x06, 0x13, 0x4e, 0xfb, 0xcf, 0x02,
		0x11, 0x43, 0x11, 0x3a, 0xd1, 0xf8, 0xb8, 0x22,

		//public
		0x0e, 0xe8, 0x29, 0x1c, 0xc5, 0x9d, 0x51, 0x9c,
		0xb2, 0x94, 0xdd, 0xc4, 0x5c, 0xb9, 0xf7, 0x0f,
		0xd1, 0xd9, 0x3e, 0x4c, 0x45, 0x55, 0x15, 0x70,
		0x84, 0x4d, 0x2e, 0x18, 0xad, 0x99, 0xc4, 0xf9,
		0xfe, 0xc7, 0xe8, 0x6f, 0x5c, 0xda, 0xac, 0xe9,
		0x55, 0xff, 0x42, 0x75, 0x52, 0x6c, 0x04, 0xb6,
		0xe1, 0xc8, 0x49, 0xb9, 0xc1, 0x86, 0x37, 0xd0,

		//symmetric
		0x27, 0x54, 0xcd, 0xa7, 0x12, 0x98, 0x88, 0x3d,
		0x4e, 0xf5, 0x11, 0x23, 0x92, 0x74, 0xb8, 0xa7,
		0xef, 0x7e, 0x51, 0x7e, 0x31, 0x28, 0xd4, 0xf7,
		0xfc, 0xfd, 0x9c, 0x62, 0xff, 0x65, 0x09, 0x65,
	})

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		curve.sign(msg, &k)
	}
}

func (s *Ed448Suite) BenchmarkVerify(c *C) {
	curve := newRadixCurve()
	msg := []byte("hey there")
	sk := privateKey([privKeyBytes]byte{
		//secret
		0x1f, 0x44, 0xfd, 0x2e, 0xde, 0x47, 0xca, 0xa8,
		0x7c, 0x4c, 0x45, 0x88, 0x1a, 0x7e, 0x01, 0x5a,
		0xa9, 0x01, 0x37, 0xfb, 0x0d, 0xbe, 0xb9, 0xe0,
		0xeb, 0x47, 0x29, 0xf7, 0x74, 0x0b, 0x5c, 0x23,
		0x66, 0xaa, 0xfd, 0x39, 0x03, 0x38, 0x78, 0x80,
		0x8f, 0xb2, 0x06, 0x13, 0x4e, 0xfb, 0xcf, 0x02,
		0x11, 0x43, 0x11, 0x3a, 0xd1, 0xf8, 0xb8, 0x22,

		//public
		0x0e, 0xe8, 0x29, 0x1c, 0xc5, 0x9d, 0x51, 0x9c,
		0xb2, 0x94, 0xdd, 0xc4, 0x5c, 0xb9, 0xf7, 0x0f,
		0xd1, 0xd9, 0x3e, 0x4c, 0x45, 0x55, 0x15, 0x70,
		0x84, 0x4d, 0x2e, 0x18, 0xad, 0x99, 0xc4, 0xf9,
		0xfe, 0xc7, 0xe8, 0x6f, 0x5c, 0xda, 0xac, 0xe9,
		0x55, 0xff, 0x42, 0x75, 0x52, 0x6c, 0x04, 0xb6,
		0xe1, 0xc8, 0x49, 0xb9, 0xc1, 0x86, 0x37, 0xd0,

		//symmetric
		0x27, 0x54, 0xcd, 0xa7, 0x12, 0x98, 0x88, 0x3d,
		0x4e, 0xf5, 0x11, 0x23, 0x92, 0x74, 0xb8, 0xa7,
		0xef, 0x7e, 0x51, 0x7e, 0x31, 0x28, 0xd4, 0xf7,
		0xfc, 0xfd, 0x9c, 0x62, 0xff, 0x65, 0x09, 0x65,
	})

	pk := publicKey([pubKeyBytes]byte{
		//public
		0x0e, 0xe8, 0x29, 0x1c, 0xc5, 0x9d, 0x51, 0x9c,
		0xb2, 0x94, 0xdd, 0xc4, 0x5c, 0xb9, 0xf7, 0x0f,
		0xd1, 0xd9, 0x3e, 0x4c, 0x45, 0x55, 0x15, 0x70,
		0x84, 0x4d, 0x2e, 0x18, 0xad, 0x99, 0xc4, 0xf9,
		0xfe, 0xc7, 0xe8, 0x6f, 0x5c, 0xda, 0xac, 0xe9,
		0x55, 0xff, 0x42, 0x75, 0x52, 0x6c, 0x04, 0xb6,
		0xe1, 0xc8, 0x49, 0xb9, 0xc1, 0x86, 0x37, 0xd0,
	})

	signature, err := curve.sign(msg, &sk)
	c.Assert(err, IsNil)

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		curve.verify(signature, msg, &pk)
	}
}

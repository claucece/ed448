package ed448

import . "gopkg.in/check.v1"

type DecafNielsSuite struct{}

var _ = Suite(&DecafNielsSuite{})

func (s *DecafNielsSuite) Test_DecafLookup(c *C) {

	expA := &bigNumber{
		0x0ad825f1, 0x0d37716c,
		0x0ba9552a, 0x0883870c,
		0x05c762e3, 0x08ef785f,
		0x00469242, 0x06cb253e,
		0x0ee9d967, 0x07b8f17f,
		0x032b52b6, 0x0a43de69,
		0x02af783c, 0x01aca9fe,
		0x0ff0b680, 0x08967778,
	}

	expB := &bigNumber{0x0dc6c9c3, 0x06400c4c,
		0x0691083f, 0x01e8c978,
		0x0f68e0c5, 0x0ad74f01,
		0x072b5f6a, 0x0f7feb03,
		0x05ade13a, 0x02f60d17,
		0x0221a678, 0x098ec54a,
		0x071f244e, 0x0fcfea8a,
		0x0e45ded2, 0x0dea6660,
	}
	expC := &bigNumber{0x0a8d6752, 0x02585b4a,
		0x015a2089, 0x0e62da76,
		0x01f39b68, 0x010c1c74,
		0x0ced9f65, 0x0569bb1e,
		0x04daa724, 0x0ba6d09e,
		0x0ef281b9, 0x07d3e20a,
		0x0ca3ffdc, 0x0bd7f65a,
		0x050288a8, 0x0dea434a,
	}

	zerothNiels := uint(0)
	sixteenthNiels := uint(16)
	ninethNiels := uint(9)

	point := precomputedBaseTable.decafLookup(zerothNiels, sixteenthNiels, ninethNiels)

	c.Assert(expA, DeepEquals, point.a)
	c.Assert(expB, DeepEquals, point.b)
	c.Assert(expC, DeepEquals, point.c)

}

func (s *DecafNielsSuite) Test_DecafCondNegNiels(c *C) {

	n := &twNiels{
		&bigNumber{0x00000000},
		&bigNumber{0x0ac67eac, 0x08c3224f,
			0x038fe548, 0x09a46a59,
			0x0e30ed3f, 0x032c1eb2,
			0x08ebe610, 0x03168199,
			0x0dd4e788, 0x06d5a576,
			0x077ec52f, 0x00987f7d,
			0x03a54795, 0x08cbe066,
			0x0db4e599, 0x0af8126b,
		},
		&bigNumber{0x08db85c2, 0x0fd2361e,
			0x0ce2105d, 0x06a17729,
			0x0e3ca84d, 0x0a137aa5,
			0x0985ee61, 0x05a26d64,
			0x0734c5f3, 0x0da853af,
			0x01d955b7, 0x03160ecd,
			0x0a59046d, 0x0c32cf71,
			0x98dce72d, 0x00007fff,
		},
	}

	expA := &bigNumber{0x00000000}
	expB := &bigNumber{0x0ac67eac, 0x08c3224f,
		0x038fe548, 0x09a46a59,
		0x0e30ed3f, 0x032c1eb2,
		0x08ebe610, 0x03168199,
		0x0dd4e788, 0x06d5a576,
		0x077ec52f, 0x00987f7d,
		0x03a54795, 0x08cbe066,
		0x0db4e599, 0x0af8126b,
	}

	expC := &bigNumber{0x08db85c2, 0x0fd2361e,
		0x0ce2105d, 0x06a17729,
		0x0e3ca84d, 0x0a137aa5,
		0x0985ee61, 0x05a26d64,
		0x0734c5f3, 0x0da853af,
		0x01d955b7, 0x03160ecd,
		0x0a59046d, 0x0c32cf71,
		0x98dce72d, 0x00007fff,
	}

	n.condNegNiels(0)

	c.Assert(expA, DeepEquals, n.a)
	c.Assert(expB, DeepEquals, n.b)
	c.Assert(expC, DeepEquals, n.c)

	n.condNegNiels(dword_t(0xffffffff))

	expAFalse := &bigNumber{0x0ac67eac, 0x08c3224f,
		0x038fe548, 0x09a46a59,
		0x0e30ed3f, 0x032c1eb2,
		0x08ebe610, 0x03168199,
		0x0dd4e788, 0x06d5a576,
		0x077ec52f, 0x00987f7d,
		0x03a54795, 0x08cbe066,
		0x0db4e599, 0x0af8126b,
	}
	expBFalse := &bigNumber{0x00000000, 0x00000000,
		0x00000000, 0x00000000,
		0x00000000, 0x00000000,
		0x00000000, 0x00000000,
		0x00000000, 0x00000000,
		0x00000000, 0x00000000,
		0x00000000, 0x00000000,
		0x00000000, 0x00000000,
	}
	expCFalse := &bigNumber{0x07247a3d, 0x002dc9e1,
		0x031defa2, 0x095e88d6,
		0x01c357b2, 0x05ec855a,
		0x067a119e, 0x0a5d929b,
		0x08cb3a0b, 0x0257ac50,
		0x0e26aa48, 0x0ce9f132,
		0x05a6fb92, 0x03cd308e,
		0x072318d2, 0x0fff8007,
	}

	c.Assert(expAFalse, DeepEquals, n.a)
	c.Assert(expBFalse, DeepEquals, n.b)
	c.Assert(expCFalse, DeepEquals, n.c)
}

func (s *DecafNielsSuite) Test_DecafCondNegNielsWithTable(c *C) {
	n := &twNiels{
		&bigNumber{0x08fcb20f, 0x04611087, 0x01cc6f32, 0x0df43db2, 0x04516644, 0x0ffdde9f, 0x091686b9, 0x05199177, 0x0fd34473, 0x0b72b441, 0x0cb1c72b, 0x08d45684, 0x00fc17a5, 0x01518137, 0x007f74d3, 0x0a456d13},
		&bigNumber{0x09b607dc, 0x01430f14, 0x016715fc, 0x0e992ccd, 0x00a32a09, 0x0a62209b, 0x0c26b8e4, 0x0b889ced, 0x0ac109cf, 0x059bf9a3, 0x0b7feac2, 0x06871bb3, 0x0d9a0e6b, 0x0f4a4d5f, 0x00cd69a5, 0x0b95db46},
		&bigNumber{0x08bda702, 0x03630441, 0x01561558, 0x07bc5686, 0x0e30416f, 0x0f344bc8, 0x080f59d7, 0x0a645370, 0x07d00ace, 0x0b4c2007, 0x0b26f8cc, 0x0ee79620, 0x00b5403d, 0x0a6a558e, 0x066f3d19, 0x08f1d2c7},
	}

	expA := &bigNumber{0x08fcb20f, 0x04611087, 0x01cc6f32, 0x0df43db2, 0x04516644, 0x0ffdde9f, 0x091686b9, 0x05199177, 0x0fd34473, 0x0b72b441, 0x0cb1c72b, 0x08d45684, 0x00fc17a5, 0x01518137, 0x007f74d3, 0x0a456d13}
	expB := &bigNumber{0x09b607dc, 0x01430f14, 0x016715fc, 0x0e992ccd, 0x00a32a09, 0x0a62209b, 0x0c26b8e4, 0x0b889ced, 0x0ac109cf, 0x059bf9a3, 0x0b7feac2, 0x06871bb3, 0x0d9a0e6b, 0x0f4a4d5f, 0x00cd69a5, 0x0b95db46}
	expC := &bigNumber{0x08bda702, 0x03630441, 0x01561558, 0x07bc5686, 0x0e30416f, 0x0f344bc8, 0x080f59d7, 0x0a645370, 0x07d00ace, 0x0b4c2007, 0x0b26f8cc, 0x0ee79620, 0x00b5403d, 0x0a6a558e, 0x066f3d19, 0x08f1d2c7}

	n.condNegNiels(dword_t(0))

	c.Assert(expA, DeepEquals, n.a)
	c.Assert(expB, DeepEquals, n.b)
	c.Assert(expC, DeepEquals, n.c)

}
